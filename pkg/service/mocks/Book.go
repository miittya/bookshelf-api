// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	bookshelf "bookshelf-api"

	mock "github.com/stretchr/testify/mock"
)

// Book is an autogenerated mock type for the Book type
type Book struct {
	mock.Mock
}

// Create provides a mock function with given fields: userID, listID, book
func (_m *Book) Create(userID int, listID int, book bookshelf.Book) (int, error) {
	ret := _m.Called(userID, listID, book)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, bookshelf.Book) (int, error)); ok {
		return rf(userID, listID, book)
	}
	if rf, ok := ret.Get(0).(func(int, int, bookshelf.Book) int); ok {
		r0 = rf(userID, listID, book)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, int, bookshelf.Book) error); ok {
		r1 = rf(userID, listID, book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userID, bookID
func (_m *Book) Delete(userID int, bookID int) error {
	ret := _m.Called(userID, bookID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userID, bookID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: userID, listID
func (_m *Book) GetAll(userID int, listID int) ([]bookshelf.Book, error) {
	ret := _m.Called(userID, listID)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []bookshelf.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]bookshelf.Book, error)); ok {
		return rf(userID, listID)
	}
	if rf, ok := ret.Get(0).(func(int, int) []bookshelf.Book); ok {
		r0 = rf(userID, listID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bookshelf.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: userID, bookID
func (_m *Book) GetByID(userID int, bookID int) (bookshelf.Book, error) {
	ret := _m.Called(userID, bookID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 bookshelf.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (bookshelf.Book, error)); ok {
		return rf(userID, bookID)
	}
	if rf, ok := ret.Get(0).(func(int, int) bookshelf.Book); ok {
		r0 = rf(userID, bookID)
	} else {
		r0 = ret.Get(0).(bookshelf.Book)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userID, bookID, input
func (_m *Book) Update(userID int, bookID int, input bookshelf.UpdateBookInput) error {
	ret := _m.Called(userID, bookID, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, bookshelf.UpdateBookInput) error); ok {
		r0 = rf(userID, bookID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBook creates a new instance of Book. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBook(t interface {
	mock.TestingT
	Cleanup(func())
}) *Book {
	mock := &Book{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
