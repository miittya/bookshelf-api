// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	bookshelf "bookshelf-api"

	mock "github.com/stretchr/testify/mock"
)

// List is an autogenerated mock type for the List type
type List struct {
	mock.Mock
}

// Create provides a mock function with given fields: userID, list
func (_m *List) Create(userID int, list bookshelf.List) (int, error) {
	ret := _m.Called(userID, list)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int, bookshelf.List) (int, error)); ok {
		return rf(userID, list)
	}
	if rf, ok := ret.Get(0).(func(int, bookshelf.List) int); ok {
		r0 = rf(userID, list)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, bookshelf.List) error); ok {
		r1 = rf(userID, list)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userID, listID
func (_m *List) Delete(userID int, listID int) error {
	ret := _m.Called(userID, listID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userID, listID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: userID
func (_m *List) GetAll(userID int) ([]bookshelf.List, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []bookshelf.List
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]bookshelf.List, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []bookshelf.List); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bookshelf.List)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: userID, listID
func (_m *List) GetByID(userID int, listID int) (bookshelf.List, error) {
	ret := _m.Called(userID, listID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 bookshelf.List
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (bookshelf.List, error)); ok {
		return rf(userID, listID)
	}
	if rf, ok := ret.Get(0).(func(int, int) bookshelf.List); ok {
		r0 = rf(userID, listID)
	} else {
		r0 = ret.Get(0).(bookshelf.List)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userID, listID, input
func (_m *List) Update(userID int, listID int, input bookshelf.UpdateListInput) error {
	ret := _m.Called(userID, listID, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, bookshelf.UpdateListInput) error); ok {
		r0 = rf(userID, listID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewList creates a new instance of List. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewList(t interface {
	mock.TestingT
	Cleanup(func())
}) *List {
	mock := &List{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
